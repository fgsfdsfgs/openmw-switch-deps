diff -ur a/MyGuiEngine/CMakeLists.txt b/MyGuiEngine/CMakeLists.txt
--- a/MyGuiEngine/CMakeLists.txt	2015-01-26 18:32:35.000000000 +0300
+++ b/MyGuiEngine/CMakeLists.txt	2019-05-30 05:35:57.662405300 +0300
@@ -35,6 +35,11 @@
 	endif ()
 endif()
 
+if (SWITCH_LIBNX)
+	add_definitions(-D__SWITCH__)
+	include_directories(SYSTEM "$ENV{DEVKITPRO}/libnx/include")
+endif()
+
 if (MYGUI_USE_FREETYPE)
 	target_link_libraries(${PROJECTNAME}
 		${FREETYPE_LIBRARIES}
diff -ur a/MyGuiEngine/src/MyGUI_EditBox.cpp b/MyGuiEngine/src/MyGUI_EditBox.cpp
--- a/MyGuiEngine/src/MyGUI_EditBox.cpp	2015-01-26 18:32:35.000000000 +0300
+++ b/MyGuiEngine/src/MyGUI_EditBox.cpp	2019-05-30 05:57:06.897001300 +0300
@@ -17,6 +17,32 @@
 
 #include <ctype.h>
 
+#ifdef __SWITCH__
+#include <switch.h>
+static std::string OnScreenKeyboard(std::string title, std::string init)
+{
+	SwkbdConfig kbd;
+	Result rc;
+	static char tmp_out[4096];
+
+	tmp_out[0] = 0;
+
+	rc = swkbdCreate(&kbd, 0);
+	if (R_SUCCEEDED(rc))
+	{
+		swkbdConfigMakePresetDefault(&kbd);
+		swkbdConfigSetInitialText(&kbd, init.c_str());
+		swkbdConfigSetGuideText(&kbd, title.c_str());
+		rc = swkbdShow(&kbd, tmp_out, sizeof(tmp_out));
+		swkbdClose(&kbd);
+		if (R_SUCCEEDED(rc))
+			return std::string(tmp_out);
+	}
+
+	return std::string("");
+}
+#endif
+
 namespace MyGUI
 {
 
@@ -630,6 +656,13 @@
 				mStartSelect = mEndSelect = mCursorPosition;
 			}
 		}
+#ifdef __SWITCH__
+		else if (_key == KeyCode::F1) // this is sent by openmw
+		{
+			std::string s = OnScreenKeyboard("Enter text", getCaption());
+			setText(s, false);
+		}
+#endif
 		else
 		{
 			// если не нажат контрл, то обрабатываем как текст
